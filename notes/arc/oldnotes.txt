Start:
cache all objects. (grab all at once or grab per-chunk?)

cache all lights.
(avoids checking all objects to find lights, trade memory for CPU)


check if lights are powered, mark objects in range as in_light TRUE
for unpowered lights, get items in range, check each if in range of a light and flag in_light TRUE/FALSE

objects with NIL or FALSE in_light property get damaged


Events:
on_entity_destroyed:
on_pre_player_mined_item:

delete object from list, both lists if a light/radar/(fire?)
if object is a light, get items in range, check each if in range of a light and flag in_light TRUE/FALSE 

on_built_entity:
add item to list, both lists if light
mark all items in range as in_light TRUE

1:  cache all objects (30,000)
2:  cache all lights, and power state (2,000)

3:  cycle lights (x) per frame, detect power state changes  ( 5 seconds at 7/frame )
4:  mark all objects in range of a powered light as in_light = TRUE
5:  mark all objects in range of a unpowered light as in_light = FALSE

6:  use events for built/mined/destroyed, add/delete objects to the caches.
6a: if new object, check for lights in range, set in_light true/false
6b: if light created/destroyed, check each object in range of that light for other powered lights. If none found mark in_light = FALSE

7: cycle all objects (cache), if object is a light, check light for power, otherwise damage any object marked in_light = false.
7a: only need to process objects in the dark, probably just process the whole list every few seconds like players.
7b: i might make a in-dark list, so we dont even need to if statement 30k items

note add to list: store list of objects within each light's range???
NOTE: removing objects should check if chunk is now empty

Futher optimization: 
Make occupied and unoccupied chunks separate lists
Make unpowered lights a seperate list
Make in_dark items a seperate list

-----

loop chunks, cache into x-y map, chunks have light[x-y] map
find lights, cache with chunk x-y

(curent) scan each chunk until found one powered light.
(possible) Lights write state into chunks(use stored chunk x-y), check if map non-nil, chunk has vis.
(possible) Radars write "lit" into chunks, radar flag, loop and refresh vis.

Index lights on x-y map
Index objects on x-y map

(possible)
(Lights write "lit" to each object. lightmap[x-y])

loop lights, check state against stored, write to objects and chunk

light deleted/destroyed/no-power, remove self from all objects and chunk,
if object light[x-y] is empty, move item to object_unit
if object created, find all lights in area, write light state into self.


(New plan)
